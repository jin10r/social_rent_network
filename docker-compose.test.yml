# Тестовый docker-compose без health checks
version: '3.8'

services:
  db:
    image: postgis/postgis:15-3.3
    container_name: social_rent_db
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
    ports:
      - "${DB_EXTERNAL_PORT}:${DB_INTERNAL_PORT}"
      
    volumes:
      - social_rent_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      
    networks:
      - social_rent_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: social_rent_backend
    restart: unless-stopped
    
    environment:
      DATABASE_URL: ${DATABASE_URL_INTERNAL}
      BOT_TOKEN: ${BOT_TOKEN}
      WEBAPP_URL: ${WEBAPP_URL}
      BACKEND_URL: ${BACKEND_URL}
      API_PREFIX: ${API_PREFIX}
      HOST: ${BACKEND_HOST}
      PORT: ${BACKEND_PORT}
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      ENVIRONMENT: ${ENVIRONMENT}
      LOG_LEVEL: ${LOG_LEVEL}
      GENERATE_TEST_DATA: ${GENERATE_TEST_DATA}
      
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
      
    depends_on:
      - db
        
    volumes:
      - ./backend:/app
      
    networks:
      - social_rent_network

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: social_rent_bot
    restart: unless-stopped
    
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      WEBAPP_URL: ${WEBAPP_URL}
      DATABASE_URL: ${DATABASE_URL_INTERNAL}
      BACKEND_URL: http://backend:${BACKEND_PORT}
      ENVIRONMENT: ${ENVIRONMENT}
      LOG_LEVEL: ${LOG_LEVEL}
      
    depends_on:
      - db
      - backend
        
    volumes:
      - ./bot:/app
      
    networks:
      - social_rent_network

volumes:
  social_rent_postgres_data:
    name: ${POSTGRES_VOLUME_NAME}

networks:
  social_rent_network:
    name: ${DOCKER_NETWORK_NAME}
    driver: bridge