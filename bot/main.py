import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import json

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = os.getenv("BOT_TOKEN", "8482163056:AAGYMcCmHUxvrzDXkBESZPGV_kGiUVHZh4I")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://64023b94ce51.ngrok-free.app")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class UserState(StatesGroup):
    waiting_for_profile = State()

@dp.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """Handle /start command"""
    user = message.from_user
    
    # Create web app button
    webapp = WebAppInfo(url=WEBAPP_URL)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webapp)]
        ]
    )
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Social Rent - —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è –∏ —Å–æ—Å–µ–¥–µ–π!

üîç –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
‚Ä¢ –ù–∞–π—Ç–∏ –ª—é–¥–µ–π, –∏—â—É—â–∏—Ö –∂–∏–ª—å–µ –≤ —Ç–æ–º –∂–µ —Ä–∞–π–æ–Ω–µ
‚Ä¢ –õ–∞–π–∫–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ—Å–µ–¥–µ–π
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ
‚Ä¢ –û–±—â–∞—Ç—å—Å—è —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Social Rent</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
1Ô∏è‚É£ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b> - —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∂–∏–ª—å—é
2Ô∏è‚É£ <b>–ü–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π</b> - –Ω–∞—Ö–æ–¥–∏—Ç–µ –ª—é–¥–µ–π —Å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º–∏—Å—è –∑–æ–Ω–∞–º–∏ –ø–æ–∏—Å–∫–∞  
3Ô∏è‚É£ <b>–°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤</b> - –ª–∞–π–∫–∞–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –ø—Ä–æ—Ñ–∏–ª–∏
4Ô∏è‚É£ <b>–ú–∞—Ç—á–∏</b> - –ø—Ä–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–∞—Ö –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è
5Ô∏è‚É£ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b> - —Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–∏–º –º–∞—Ç—á–∞–º

<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ –∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç –ª—é–¥–µ–π, —á—å–∏ –∑–æ–Ω—ã –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –≤–∞—à–µ–π
‚Ä¢ –ü—Ä–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–∞—Ö –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –≤ Telegram
‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –≤–∞—à–∏–º –º–∞—Ç—á–∞–º
    """
    
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("profile"))
async def profile_command(message: Message):
    """Quick access to profile"""
    webapp = WebAppInfo(url=f"{WEBAPP_URL}#/profile")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", web_app=webapp)]
        ]
    )
    
    await message.answer(
        "üë§ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:",
        reply_markup=keyboard
    )

@dp.message(F.web_app_data)
async def handle_web_app_data(message: Message):
    """Handle data from web app"""
    try:
        data = json.loads(message.web_app_data.data)
        
        if data.get("type") == "profile_updated":
            await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        elif data.get("type") == "match_found":
            match_user = data.get("user", {})
            await message.answer(
                f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {match_user.get('first_name', '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è!"
            )
        elif data.get("type") == "contact_request":
            await message.answer("üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
    except json.JSONDecodeError:
        logger.error(f"Invalid web app data: {message.web_app_data.data}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

@dp.message()
async def handle_other_messages(message: Message):
    """Handle other messages"""
    webapp = WebAppInfo(url=WEBAPP_URL)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webapp)]
        ]
    )
    
    await message.answer(
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Social Rent –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

async def main():
    """Main function"""
    logger.info("Starting Social Rent bot...")
    
    # Delete webhook to use polling
    await bot.delete_webhook(drop_pending_updates=True)
    
    # Start polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot error: {e}")