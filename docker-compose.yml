# =============================================================================
# SOCIAL RENT APP - UNIFIED DOCKER COMPOSE
# =============================================================================
# Запускает все сервисы: nginx, frontend, backend, bot, database
# Доступ к приложению через nginx на порту 80
# Все сервисы работают внутри единой Docker сети
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # NGINX (REVERSE PROXY)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: social_rent_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - social_rent_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # FRONTEND (REACT)
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: social_rent_frontend
    restart: unless-stopped
    environment:
      # Backend API URL (через nginx)
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
      REACT_APP_BOT_USERNAME: ${REACT_APP_BOT_USERNAME}
      REACT_APP_API_PREFIX: ${API_PREFIX}
      
      # Development settings
      NODE_ENV: development
      HOST: 0.0.0.0
      PORT: ${FRONTEND_PORT}
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - social_rent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # BACKEND (FASTAPI)
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: social_rent_backend
    restart: unless-stopped
    environment:
      # Database connection
      DATABASE_URL: ${DATABASE_URL}
      
      # Telegram settings
      BOT_TOKEN: ${BOT_TOKEN}
      WEBAPP_URL: ${WEBAPP_URL}
      BACKEND_URL: ${BACKEND_URL}
      
      # API settings
      API_PREFIX: ${API_PREFIX}
      HOST: 0.0.0.0
      PORT: ${BACKEND_PORT}
      
      # Security and CORS
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT}
      LOG_LEVEL: ${LOG_LEVEL}
      
      # Test data generation
      GENERATE_TEST_DATA: ${GENERATE_TEST_DATA}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - social_rent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # =============================================================================
  # TELEGRAM BOT
  # =============================================================================
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: social_rent_bot
    restart: unless-stopped
    environment:
      # Telegram settings
      BOT_TOKEN: ${BOT_TOKEN}
      WEBAPP_URL: ${WEBAPP_URL}
      
      # Database connection
      DATABASE_URL: ${DATABASE_URL}
      
      # Backend connection (internal)
      BACKEND_URL: http://backend:${BACKEND_PORT}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      - db
      - backend
    volumes:
      - ./bot:/app
    networks:
      - social_rent_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://backend:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # =============================================================================
  # DATABASE (POSTGRESQL + POSTGIS)
  # =============================================================================
  db:
    image: postgis/postgis:15-3.3
    container_name: social_rent_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - social_rent_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - social_rent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  social_rent_postgres_data:
    name: ${POSTGRES_VOLUME_NAME}

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  social_rent_network:
    name: ${DOCKER_NETWORK_NAME}
    driver: bridge