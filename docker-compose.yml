version: '3.8'

services:
  # ==============================================================================
  # NGINX REVERSE PROXY
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: social_rent_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    networks:
      - social_rent_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ==============================================================================
  # БАЗА ДАННЫХ (PostgreSQL с PostGIS)
  # ==============================================================================
  db:
    image: postgis/postgis:15-3.3
    container_name: social_rent_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-social_rent}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "${DB_EXTERNAL_PORT:-5433}:5432"
    volumes:
      - social_rent_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - social_rent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-social_rent}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  # ==============================================================================
  # BACKEND (FastAPI)
  # ==============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: social_rent_backend
    restart: unless-stopped
    environment:
      # База данных
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@db:5432/${POSTGRES_DB:-social_rent}
      
      # Telegram настройки
      BOT_TOKEN: ${BOT_TOKEN}
      WEBAPP_URL: ${WEBAPP_URL}
      BACKEND_URL: ${BACKEND_URL:-http://localhost:8080}
      
      # API настройки
      API_PREFIX: ${API_PREFIX:-/api}
      HOST: 0.0.0.0
      PORT: 8001
      
      # Безопасность и CORS
      SECRET_KEY: ${SECRET_KEY:-development_secret_key_change_in_production}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:8080,http://localhost:3000}
      
      # Окружение
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Тестовые данные
      GENERATE_TEST_DATA: ${GENERATE_TEST_DATA:-true}
      
    expose:
      - "8001"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - social_rent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==============================================================================
  # FRONTEND (React)
  # ==============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: social_rent_frontend
    restart: unless-stopped
    environment:
      # Backend API конфигурация (через nginx)
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL:-http://localhost:8080}
      REACT_APP_BOT_USERNAME: ${REACT_APP_BOT_USERNAME}
      
      # Development настройки
      HOST: 0.0.0.0
      PORT: 3000
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
      DANGEROUSLY_DISABLE_HOST_CHECK: true
      
    expose:
      - "3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - social_rent_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ==============================================================================
  # TELEGRAM BOT
  # ==============================================================================
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: social_rent_bot
    restart: unless-stopped
    environment:
      # Telegram настройки
      BOT_TOKEN: ${BOT_TOKEN}
      WEBAPP_URL: ${WEBAPP_URL}
      
      # База данных
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@db:5432/${POSTGRES_DB:-social_rent}
      
      # Backend URL (через nginx)
      BACKEND_URL: http://nginx:80
      
      # Окружение
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - ./bot:/app
    networks:
      - social_rent_network

# ==============================================================================
# VOLUMES
# ==============================================================================
volumes:
  social_rent_postgres_data:
    name: social_rent_postgres_data

# ==============================================================================
# NETWORKS  
# ==============================================================================
networks:
  social_rent_network:
    name: social_rent_network
    driver: bridge